// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: msg.capnp

#ifndef CAPNP_INCLUDED_8e2af1e708af8b8d_
#define CAPNP_INCLUDED_8e2af1e708af8b8d_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 6001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(9e572ce3c3cf7122);
CAPNP_DECLARE_SCHEMA(8703c132d77c0e1f);

}  // namespace schemas
}  // namespace capnp


struct CanData {
  CanData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9e572ce3c3cf7122, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Event {
  Event() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    CAN,
    SENDCAN,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8703c132d77c0e1f, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class CanData::Reader {
public:
  typedef CanData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getAddress() const;

  inline  ::uint16_t getBusTime() const;

  inline bool hasDat() const;
  inline  ::capnp::Data::Reader getDat() const;

  inline  ::uint8_t getSrc() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CanData::Builder {
public:
  typedef CanData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getAddress();
  inline void setAddress( ::uint32_t value);

  inline  ::uint16_t getBusTime();
  inline void setBusTime( ::uint16_t value);

  inline bool hasDat();
  inline  ::capnp::Data::Builder getDat();
  inline void setDat( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initDat(unsigned int size);
  inline void adoptDat(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownDat();

  inline  ::uint8_t getSrc();
  inline void setSrc( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CanData::Pipeline {
public:
  typedef CanData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Event::Reader {
public:
  typedef Event Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline  ::uint64_t getLogMonoTime() const;

  inline bool getValid() const;

  inline bool isCan() const;
  inline bool hasCan() const;
  inline  ::capnp::List< ::CanData>::Reader getCan() const;

  inline bool isSendcan() const;
  inline bool hasSendcan() const;
  inline  ::capnp::List< ::CanData>::Reader getSendcan() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Event::Builder {
public:
  typedef Event Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline  ::uint64_t getLogMonoTime();
  inline void setLogMonoTime( ::uint64_t value);

  inline bool getValid();
  inline void setValid(bool value);

  inline bool isCan();
  inline bool hasCan();
  inline  ::capnp::List< ::CanData>::Builder getCan();
  inline void setCan( ::capnp::List< ::CanData>::Reader value);
  inline  ::capnp::List< ::CanData>::Builder initCan(unsigned int size);
  inline void adoptCan(::capnp::Orphan< ::capnp::List< ::CanData>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::CanData>> disownCan();

  inline bool isSendcan();
  inline bool hasSendcan();
  inline  ::capnp::List< ::CanData>::Builder getSendcan();
  inline void setSendcan( ::capnp::List< ::CanData>::Reader value);
  inline  ::capnp::List< ::CanData>::Builder initSendcan(unsigned int size);
  inline void adoptSendcan(::capnp::Orphan< ::capnp::List< ::CanData>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::CanData>> disownSendcan();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Event::Pipeline {
public:
  typedef Event Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint32_t CanData::Reader::getAddress() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CanData::Builder::getAddress() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CanData::Builder::setAddress( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t CanData::Reader::getBusTime() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t CanData::Builder::getBusTime() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CanData::Builder::setBusTime( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool CanData::Reader::hasDat() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CanData::Builder::hasDat() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader CanData::Reader::getDat() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder CanData::Builder::getDat() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CanData::Builder::setDat( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder CanData::Builder::initDat(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CanData::Builder::adoptDat(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> CanData::Builder::disownDat() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint8_t CanData::Reader::getSrc() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t CanData::Builder::getSrc() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void CanData::Builder::setSrc( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::Event::Which Event::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline  ::Event::Which Event::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Event::Reader::getLogMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Event::Builder::getLogMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Event::Builder::setLogMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Event::Reader::getValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, true);
}

inline bool Event::Builder::getValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, true);
}
inline void Event::Builder::setValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value, true);
}

inline bool Event::Reader::isCan() const {
  return which() == Event::CAN;
}
inline bool Event::Builder::isCan() {
  return which() == Event::CAN;
}
inline bool Event::Reader::hasCan() const {
  if (which() != Event::CAN) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCan() {
  if (which() != Event::CAN) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::CanData>::Reader Event::Reader::getCan() const {
  KJ_IREQUIRE((which() == Event::CAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::CanData>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::CanData>::Builder Event::Builder::getCan() {
  KJ_IREQUIRE((which() == Event::CAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::CanData>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCan( ::capnp::List< ::CanData>::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, Event::CAN);
  ::capnp::_::PointerHelpers< ::capnp::List< ::CanData>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::CanData>::Builder Event::Builder::initCan(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, Event::CAN);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::CanData>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptCan(
    ::capnp::Orphan< ::capnp::List< ::CanData>>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, Event::CAN);
  ::capnp::_::PointerHelpers< ::capnp::List< ::CanData>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::CanData>> Event::Builder::disownCan() {
  KJ_IREQUIRE((which() == Event::CAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::CanData>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isSendcan() const {
  return which() == Event::SENDCAN;
}
inline bool Event::Builder::isSendcan() {
  return which() == Event::SENDCAN;
}
inline bool Event::Reader::hasSendcan() const {
  if (which() != Event::SENDCAN) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasSendcan() {
  if (which() != Event::SENDCAN) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::CanData>::Reader Event::Reader::getSendcan() const {
  KJ_IREQUIRE((which() == Event::SENDCAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::CanData>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::CanData>::Builder Event::Builder::getSendcan() {
  KJ_IREQUIRE((which() == Event::SENDCAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::CanData>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setSendcan( ::capnp::List< ::CanData>::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, Event::SENDCAN);
  ::capnp::_::PointerHelpers< ::capnp::List< ::CanData>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::CanData>::Builder Event::Builder::initSendcan(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, Event::SENDCAN);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::CanData>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptSendcan(
    ::capnp::Orphan< ::capnp::List< ::CanData>>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, Event::SENDCAN);
  ::capnp::_::PointerHelpers< ::capnp::List< ::CanData>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::CanData>> Event::Builder::disownSendcan() {
  KJ_IREQUIRE((which() == Event::SENDCAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::CanData>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}


#endif  // CAPNP_INCLUDED_8e2af1e708af8b8d_
